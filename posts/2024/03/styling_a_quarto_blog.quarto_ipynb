{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Styling a Quarto blog.\"\n",
        "description: |\n",
        "    Customizing a website is fun and interesting.\n",
        "    Let's learn how to tweak the appearance of a Quarto website to make it our own.\n",
        "date: \"03/29/2024\"\n",
        "categories:\n",
        "  - quarto\n",
        "  - github pages\n",
        "---\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "::: {.callout-caution}\n",
        "Dear reader, this blog post is a bit rough: these are mostly my notes as I play around with the styling of this website.\n",
        "I still publish in the hope that I can be helpful to other Quarto users.\n",
        "\n",
        "Cheers, Guillaume.\n",
        ":::\n",
        "\n",
        "# Style objectives\n",
        "\n",
        "With any project, I like to start with a small list of objectives, instead of diving straight-away into code.\n",
        "This helps keep the project grounded.\n",
        "\n",
        "As far as styling this website goes, I want to:\n",
        "\n",
        "- customize the overall styling of the page.\n",
        "- customize the font.\n",
        "- make sure the style is correctly applied to all special blocks:\n",
        "    - code blocks.\n",
        "    - mermaid diagrams.\n",
        "    - MathJax math blocks.\n",
        "    - plotly figures.\n",
        "\n",
        "Please refer to @sec-examples for examples of how my current style is applied to various Quarto elements.\n",
        "\n",
        "# Customization steps\n",
        "\n",
        "## Summary\n",
        "\n",
        "I'm using:\n",
        "\n",
        "- the cosmo bootstrap theme. Once Quarto 1.5 is released, I'll add a light-dark switch.\n",
        "- EG Garamond as a text font, Fira Code for code blocks, mathjax-fira for math blocks.\n",
        "- for mermaid, I'm using the cosmo version of mermaid that Quarto introduces, but modified to have black text.\n",
        "- for code highlighting, I'm using the github style (I'm unsure if it actually matches what shows on github).\n",
        "- I haven't styled plotly plots. It is a bit complicated.\n",
        "\n",
        "My current configuration is (or check out [the latest version here](https://github.com/GuillaumeDehaene/guillaumedehaene.github.io/blob/main/_quarto.yml)):\n",
        "\n",
        "```{.yaml filename=\"_quarto.yml\"}\n",
        "format:\n",
        "    html:\n",
        "        theme:\n",
        "            - cosmo\n",
        "            - style.scss\n",
        "        mainfont: \"EB Garamond, Georgia, serif\"\n",
        "        monofont: Fira Code, consolas, courier, monospace\n",
        "        highlight-style: github\n",
        "        \n",
        "        html-math-method:\n",
        "            method: mathjax\n",
        "            url: \"https://cdn.jsdelivr.net/npm/mathjax@4.0.0-beta.4/tex-mml-chtml.js\"   # <1>\n",
        "        include-in-header:\n",
        "            text: |\n",
        "                <style> # <2>\n",
        "                @import url('https://fonts.googleapis.com/css2?family=EB+Garamond:ital,wght@0,400..800;1,400..800&display=swap')\n",
        "                @import url('https://fonts.googleapis.com/css2?family=Fira+Code:wght@300..700&display=swap')\n",
        "                </style>\n",
        "                <script>\n",
        "                MathJax = {\n",
        "                    tex: {  # <3>\n",
        "                        tags: 'ams'  // should be 'ams', 'none', or 'all'\n",
        "                    },\n",
        "                    output: {\n",
        "                        font: 'mathjax-fira'\n",
        "                    }\n",
        "                };\n",
        "                </script>\n",
        "```\n",
        "\n",
        "1. Importing Mathjax version 4.0 beta.\n",
        "2. Importing the fonts.\n",
        "3. Unrelated code: this numbers all equations.\n",
        "\n",
        "I also added an external style sheet: changing the font was causing a bad alignment in annotated code blocks, and I had to turn off a peculiar styling that Garamond applies to numerals.\n",
        "Check out [the latest version here](https://github.com/GuillaumeDehaene/guillaumedehaene.github.io/blob/main/style.scss):\n",
        "\n",
        "```{.scss filename=style.scss}\n",
        "/*-- scss:defaults --*/\n",
        "body {\n",
        "    // By default, EG Garamond uses \"old-styles\" numerics which have a baseline offset\n",
        "    // for some numerals. This turns that ugly feature off.\n",
        "    font-variant-numeric: lining-nums;\n",
        "}\n",
        "\n",
        "dl.code-annotation-container-grid dt {\n",
        "    // needed because I have changed the mono font\n",
        "    line-height: 20px !important;\n",
        "}\n",
        "\n",
        "$mermaid-font-family: \"EB Garamond, Georgia, serif\";\n",
        "$mermaid-label-bg-color: #000000;\n",
        "$mermaid-label-fg-color: #000000;\n",
        "```\n",
        "\n",
        "## Overall style\n",
        "\n",
        "For the overall style, I would like:\n",
        "\n",
        "- something sleek and modern.\n",
        "- something with a light and dark mode.\n",
        "- something slightly personalized (but not too much! I'm really bad at graphical design).\n",
        "- something simple.\n",
        "\n",
        "Given that [Quarto has built-in support for various free themes](https://quarto.org/docs/output-formats/html-themes.html), I've decided to keep it simple and just use that.\n",
        "\n",
        "- Initially, I used to combo of flatly + darkly but I dislike some of the blues they use.\n",
        "- I've seen that, in version 1.5, Quarto will support light and dark mode styling for all themes. I've thus switched to using the cosmo theme.\n",
        "    It is sleek, modern, and simple, like I wanted.\n",
        "    Once the necessary update is pushed out, I will add light/dark mode and I will perhaps play around with the colors.\n",
        "- to put a tiny bit of personalization, I've modified the text font to use Garamond instead (with appropriate fallbacks, just in case):\n",
        "\n",
        "    ```{.yaml filename=\"_quarto.yml\"}\n",
        "    format:\n",
        "        html:\n",
        "            mainfont: \"EB Garamond, Georgia, serif\"\n",
        "    ```\n",
        "\n",
        "    I'm unsure whether you need to add a call to download the font from the web in the HTML header: I've added one anyway.\n",
        "\n",
        "- annoyingly, Garamond uses *old-style* numerals by default. This setting makes some numerals, such as 3 and 4, align the middle of the character to the baseline of the text. I'm honestly surprised that this even exists and I've turned it off.\n",
        "\n",
        "    ```{.scss filename=style.scss}\n",
        "    /*-- scss:defaults --*/\n",
        "    body {\n",
        "        // By default, EB Garamond uses \"old-styles\" numerics which have a baseline offset\n",
        "        // for some numerals. This turns that ugly feature off.\n",
        "        font-variant-numeric: lining-nums;\n",
        "    }\n",
        "    ```\n",
        "\n",
        "## Code blocks\n",
        "\n",
        "For code blocks, there are several basic choices available:\n",
        "\n",
        "- the font. Again, I'm going for a bit of personalization and using Fira code.\n",
        "- [code highlighting](https://quarto.org/docs/output-formats/html-code.html#highlighting).\n",
        "    - the default setting is very grey: let's try to have more color. ^[NB: the fact that the syntax highlighting is so grey could be due to the cosmo theme. Maybe the colors are computed from the base colors of the theme? That would be a weird choice.]\n",
        "    - after testing most of them, my shortlist was:\n",
        "        - github\n",
        "        - solarized\n",
        "        - pygments\n",
        "        - breeze\n",
        "        - gruvbox\n",
        "    - In the end, I've decided on github. It's light but detailed.\n",
        "    - It would probably be worth it to explore a little bit more if I want something with more colors, like my setting on vscode.\n",
        "\n",
        "The resulting website configuration is:\n",
        "\n",
        "```{.yaml filename=\"_quarto.yml\"}\n",
        "format:\n",
        "    html:\n",
        "        monofont: Fira Code, consolas, courier, monospace\n",
        "        highlight-style: github\n",
        "```\n",
        "\n",
        "Changing the font caused a bad alignment in annotated code blocks, so I had to introduce an external style.\n",
        "I must be doing something slightly wrong because I needed to add an `!important` tag to ensure that this took priority over the Quarto styling.\n",
        "\n",
        "```{.scss filename=style.scss}\n",
        "/*-- scss:defaults --*/\n",
        "dl.code-annotation-container-grid dt {\n",
        "    // needed because I have changed the mono font\n",
        "    line-height: 20px !important;\n",
        "}\n",
        "```\n",
        "\n",
        "## Mermaid diagrams\n",
        "\n",
        "Mermaid diagrams can either use:\n",
        "\n",
        "- reactive styling, based on the base style (ie: `cosmo` for me): I didn't find that it worked out great for `cosmo` since it uses a very luminous blue for text.\n",
        "- [using the built-in themes](https://quarto.org/docs/authoring/diagrams.html#using-mermaids-built-in-themes). I didn't think it worked great with the cosmo main theme.\n",
        "- [custom styling](https://quarto.org/docs/authoring/diagrams.html#customizing-mermaid). ⚠️ I struggled with this since it is not compatible with mermaid built-in themes ⚠️. I've just used this to set the font to black and the font-family to match the text font.\n",
        "\n",
        "I'll probably want to return to this in the future, but for the time being, the diagrams are going to be neutral and easy on the eyes: good enough for now.\n",
        "\n",
        "```{.scss filename=style.scss}\n",
        "$mermaid-font-family: \"EB Garamond, Georgia, serif\";\n",
        "$mermaid-label-bg-color: #000000;\n",
        "$mermaid-label-fg-color: #000000;\n",
        "```\n",
        "\n",
        "## Math blocks\n",
        "\n",
        "Currently, the released version of MathJax: version 3.0, does not support much in the way of customization.\n",
        "Apparently, [version 4.0 will allow to choose the font](https://github.com/mathjax/MathJax-docs/issues/319#issuecomment-1375748349).\n",
        "Well, then let's use the 4.0 beta version!\n",
        "\n",
        "```{.yaml filename=\"_quarto.yml\"}\n",
        "format:\n",
        "    html:\n",
        "        html-math-method:\n",
        "            method: mathjax\n",
        "            url: \"https://cdn.jsdelivr.net/npm/mathjax@4.0.0-beta.4/tex-mml-chtml.js\"\n",
        "        include-in-header:\n",
        "            text: |\n",
        "                <style>\n",
        "                @import url('https://fonts.googleapis.com/css2?family=EB+Garamond:ital,wght@0,400..800;1,400..800&display=swap')\n",
        "                @import url('https://fonts.googleapis.com/css2?family=Fira+Code:wght@300..700&display=swap')\n",
        "                </style>\n",
        "                <script>\n",
        "                MathJax = {\n",
        "                    tex: {\n",
        "                        tags: 'ams'  // should be 'ams', 'none', or 'all'\n",
        "                    },\n",
        "                    output: {\n",
        "                        font: 'mathjax-fira'\n",
        "                    }\n",
        "                };\n",
        "                </script>\n",
        "```\n",
        "\n",
        "I've set the font to `mathjax-fira`, to align with code blocks.\n",
        "\n",
        "## Plotly figures\n",
        "\n",
        "As far as I can tell, plotly does not support css-based customization of its figures.\n",
        "It is apparently possible to use existing or create new python templates to have consistent styling accross figures.\n",
        "Apparently, [this dash-bootstrap-components library](https://hellodash.pythonanywhere.com/adding-themes/figure-templates) ([pip link](https://pypi.org/project/dash-bootstrap-components/)) includes templates that match the bootstrap styles that are built-into Quarto?\n",
        "It should even work with [light-dark switching](https://hellodash.pythonanywhere.com/adding-themes/color-modes)?\n",
        "I'll make a note of it, and return to this if it becomes necessary.\n",
        "\n",
        "# Examples {#sec-examples}\n",
        "\n",
        "Since this page is on the website, I'll write down some examples, to have a visual reference.\n",
        "\n",
        "Text formatting:\n",
        "\n",
        "- *italics*, **bold**, ***bold italics***\n",
        "- superscript^2^ / subscript~2~\n",
        "- ~~strikethrough~~\n",
        "\n",
        "> A blockquote\n",
        "\n",
        "A keyboard shortcut: {{< kbd Shift-Ctrl-P >}}. ^[Unless I start doing IT posts, this probably won't be useful, but there's no reason to be lazy and not check it.]\n",
        "\n",
        "A table:\n",
        "\n",
        "| Right | Left | Default | Center |\n",
        "|------:|:-----|---------|:------:|\n",
        "|   12  |  12  |    12   |    12  |\n",
        "|  123  |  123 |   123   |   123  |\n",
        "|    1  |    1 |     1   |     1  |\n",
        "\n",
        "Inline math $0+0=0$ and inline code `compute_something(foo)`. And their display equivalents:\n",
        "\n",
        "\\begin{equation}\n",
        "0 + 0 = 0\n",
        "\\end{equation}\n",
        "\n",
        "\\begin{align}\n",
        "(a+2)(a-2) &= a^2 + 2a - 2a - 4 \\\\\n",
        "            &= a^2 - 4\n",
        "\\end{align}\n",
        "\n",
        "```\n",
        "This block doesn't have syntax coloring.\n",
        "The next one has python syntax coloring and a file title.\n",
        "```\n",
        "\n",
        "```{.python filename=\"square.py\"}\n",
        "def square(x: int) -> int:\n",
        "    \"\"\"Compute the squared value.\n",
        "\n",
        "    This computes the square of the input.\n",
        "    \"\"\"\n",
        "    # This is high-level math!\n",
        "    return x**2\n",
        "```\n",
        "\n",
        "A mermaid diagram, with figure styling:\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "```{mermaid}\n",
        "%%| fig-cap: \"This is a caption.\"\n",
        "flowchart LR\n",
        "  A[Hard edge] --> B(Round edge)\n",
        "  B --> C{Decision}\n",
        "  C --> D[Result one]\n",
        "  C --> E[Result two]\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "A callout block:\n",
        "\n",
        ":::{.callout-note}\n",
        "Note that there are five types of callouts, including: \n",
        "`note`, `tip`, `warning`, `caution`, and `important`.\n",
        ":::\n",
        "\n",
        "[This is a span that has the class `aside` which places it in the margin without a footnote number.]{.aside}\n",
        "\n",
        "This is a plotly figure:\n"
      ],
      "id": "4f51a847"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import plotly.express as px\n",
        "import plotly.io as pio\n",
        "df = px.data.iris()\n",
        "fig = px.scatter(df, x=\"sepal_width\", y=\"sepal_length\", \n",
        "                 color=\"species\", \n",
        "                 marginal_y=\"violin\", marginal_x=\"box\", \n",
        "                 trendline=\"ols\", template=\"simple_white\")\n",
        "fig.show()"
      ],
      "id": "fbea1c78",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Annotated code block:\n",
        "\n",
        "```r\n",
        "library(tidyverse)\n",
        "library(palmerpenguins)\n",
        "penguins |>                                      # <1>\n",
        "  mutate(                                        # <2>\n",
        "    bill_ratio = bill_depth_mm / bill_length_mm, # <2>\n",
        "    bill_area  = bill_depth_mm * bill_length_mm  # <2>\n",
        "  )                                              # <2>\n",
        "```\n",
        "1. Take `penguins`, and then,\n",
        "2. add new columns for the bill ratio and bill area."
      ],
      "id": "90bbd240"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}